OOT wooden chest textures use two RGBA5551-encoded images for the front and sides. The front is a 32x64 pixel (width x height) image, and the side is a 32x32 pixel image. The front is the left half of the front face, which is mirrored by the game to make the full front texture. The side is the upper-left corner of a face, which is mirrored by the game vertically and horizontally to make the full texture. The lid re-uses parts of each texture. These parts are highlighted red in the two images contained in this folder. Vanilla textures can be extracted from decomp in the folder assets/objects/object_box/.

To make a new chest texture from scratch, create two 32-bit PNGs (8 bits per color channel + 8bit alpha channel) with the dimensions specified above. To patch into the game, the PNGs must be converted to RGBA5551-encoded binary data. This can be accomplished with imagemagick using the following commands:

front texture (32x64):
magick -size 32x64 -depth 8 front.png ^
-channel R +level 0,31 -evaluate leftshift 11 -evaluate and 63488 +channel ^
-channel G +level 0,31 -evaluate leftshift 6 -evaluate and 1984 +channel ^
-channel B +level 0,31 -evaluate leftshift 1 -evaluate and 62 +channel ^
-channel A -evaluate and 1 +channel ^
-channel RGBA -separate +channel ^
-channel R -evaluate-sequence add  +channel ^
-depth 16 -endian MSB R:front.bin

side texture (32x32):
magick -size 32x32 -depth 8 base.png ^
-channel R +level 0,31 -evaluate leftshift 11 -evaluate and 63488 +channel ^
-channel G +level 0,31 -evaluate leftshift 6 -evaluate and 1984 +channel ^
-channel B +level 0,31 -evaluate leftshift 1 -evaluate and 62 +channel ^
-channel A -evaluate and 1 +channel ^
-channel RGBA -separate +channel ^
-channel R -evaluate-sequence add  +channel ^
-depth 16 -endian MSB R:base.bin

These compress each RGB channel from 8 bits to 5 bits as well as the alpha channel to 1 bit, add together into a single 16-bit channel, and save the result to a file. Since the channels are losing 3 bits of data, the process is inherently lossy. A batch file used to generate textures for Chest Textures Match Content is included in this folder as an example.

RGBA5551-encoded images can be converted back to PNGs using the utility here: https://github.com/krimtonz/rgba5551topng. A compiled copy for ubuntu 20.04 is included in this folder, dependent on libpng. If on Windows, it is recommended to use WSL for this as well as the n64 toolchain.

If any part of vanilla OOT textures are used for custom textures, the copyrighted portions of the image must be removed before contributing to the randomizer. This can be achieved by simply subtracting each byte of the vanilla texture from the custom texture. diff_bytes.py in this folder is provided as an example. When generating a randomizer patch file or rom, read the texture bytes from the user-provided rom and dynamically add these bytes back in to the custom texture before patching. Search for '# Apply chest texture diffs' in Patches.py for an example. Vanilla texture addresses can be found via decomp and/or the cloudmodding wiki, usually under objects. In an uncompressed rom, such as ZOOTDEC.z64 as generated by the randomizer, the wooden chest front texture starts at 0xFEC798 (length 4096 or 0x1000 bytes), and the wooden chest base texture starts at 0xFED798 (length 2048 or 0x800 bytes). To extract, just copy the desired bytes using your preferred hex editor.

OOTR custom chest textures work by modifying the wooden chest display list to allow switching textures based on chest actor type. The main logic for this is in ASM/c/chests.c as of version 6.2.19. draw_chest specifies which display list to use depending on chest type (boss key texture or wooden), then stores the corresponding texture for the chest type if it is not a boss key chest. Chest types are defined as follows in ASM/c/item_table.h and Patches.py (search for '#Fix chest animations'):

- BROWN_CHEST 0 (vanilla small wooden chest)
- GOLD_CHEST 2 (vanilla big boss key chest)
- GILDED_CHEST 12 (custom type for major items)
- SILVER_CHEST 13 (custom type for small keys)
- SKULL_CHEST_SMALL 14 (custom type for non-major item skull tokens)
- SKULL_CHEST_BIG 15 (custom type for major item skull tokens)
- HEART_CHEST_SMALL 16 (custom type for non-major heart containers and pieces of heart)
- HEART_CHEST_BIG 17 (custom type for major heart containers and pieces of heart)

Maximum number of chest types is 256 (max type id 255).

Chest types for purposes of this feature look up the type from the item table based on its contents. Item chest type definitions are defined in ASM/c/item_table.c.

To add a new type or change and existing type, the type definitions in item_table.h and Patches.py must match.

Boss key textures use a different display list for the lid. This appears to use the side texture for both the side and top faces. This display list does not support custom textures, but the actor display list can be changed to use the boss key texture by changing the dlist variable in the draw_chest function in ASM/c/chests.c. It is already applied for boss key chests.

